# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Backend
else:
    import _Backend

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Backend.delete_SwigPyIterator

    def value(self):
        return _Backend.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Backend.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Backend.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Backend.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Backend.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Backend.SwigPyIterator_copy(self)

    def next(self):
        return _Backend.SwigPyIterator_next(self)

    def __next__(self):
        return _Backend.SwigPyIterator___next__(self)

    def previous(self):
        return _Backend.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Backend.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Backend.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Backend.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Backend.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Backend.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Backend.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Backend.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Backend:
_Backend.SwigPyIterator_swigregister(SwigPyIterator)

class StdVectorString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Backend.StdVectorString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Backend.StdVectorString___nonzero__(self)

    def __bool__(self):
        return _Backend.StdVectorString___bool__(self)

    def __len__(self):
        return _Backend.StdVectorString___len__(self)

    def __getslice__(self, i, j):
        return _Backend.StdVectorString___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Backend.StdVectorString___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Backend.StdVectorString___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Backend.StdVectorString___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Backend.StdVectorString___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Backend.StdVectorString___setitem__(self, *args)

    def pop(self):
        return _Backend.StdVectorString_pop(self)

    def append(self, x):
        return _Backend.StdVectorString_append(self, x)

    def empty(self):
        return _Backend.StdVectorString_empty(self)

    def size(self):
        return _Backend.StdVectorString_size(self)

    def swap(self, v):
        return _Backend.StdVectorString_swap(self, v)

    def begin(self):
        return _Backend.StdVectorString_begin(self)

    def end(self):
        return _Backend.StdVectorString_end(self)

    def rbegin(self):
        return _Backend.StdVectorString_rbegin(self)

    def rend(self):
        return _Backend.StdVectorString_rend(self)

    def clear(self):
        return _Backend.StdVectorString_clear(self)

    def get_allocator(self):
        return _Backend.StdVectorString_get_allocator(self)

    def pop_back(self):
        return _Backend.StdVectorString_pop_back(self)

    def erase(self, *args):
        return _Backend.StdVectorString_erase(self, *args)

    def __init__(self, *args):
        _Backend.StdVectorString_swiginit(self, _Backend.new_StdVectorString(*args))

    def push_back(self, x):
        return _Backend.StdVectorString_push_back(self, x)

    def front(self):
        return _Backend.StdVectorString_front(self)

    def back(self):
        return _Backend.StdVectorString_back(self)

    def assign(self, n, x):
        return _Backend.StdVectorString_assign(self, n, x)

    def resize(self, *args):
        return _Backend.StdVectorString_resize(self, *args)

    def insert(self, *args):
        return _Backend.StdVectorString_insert(self, *args)

    def reserve(self, n):
        return _Backend.StdVectorString_reserve(self, n)

    def capacity(self):
        return _Backend.StdVectorString_capacity(self)
    __swig_destroy__ = _Backend.delete_StdVectorString

# Register StdVectorString in _Backend:
_Backend.StdVectorString_swigregister(StdVectorString)

class StdVectorStdVectorString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Backend.StdVectorStdVectorString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Backend.StdVectorStdVectorString___nonzero__(self)

    def __bool__(self):
        return _Backend.StdVectorStdVectorString___bool__(self)

    def __len__(self):
        return _Backend.StdVectorStdVectorString___len__(self)

    def __getslice__(self, i, j):
        return _Backend.StdVectorStdVectorString___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Backend.StdVectorStdVectorString___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Backend.StdVectorStdVectorString___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Backend.StdVectorStdVectorString___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Backend.StdVectorStdVectorString___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Backend.StdVectorStdVectorString___setitem__(self, *args)

    def pop(self):
        return _Backend.StdVectorStdVectorString_pop(self)

    def append(self, x):
        return _Backend.StdVectorStdVectorString_append(self, x)

    def empty(self):
        return _Backend.StdVectorStdVectorString_empty(self)

    def size(self):
        return _Backend.StdVectorStdVectorString_size(self)

    def swap(self, v):
        return _Backend.StdVectorStdVectorString_swap(self, v)

    def begin(self):
        return _Backend.StdVectorStdVectorString_begin(self)

    def end(self):
        return _Backend.StdVectorStdVectorString_end(self)

    def rbegin(self):
        return _Backend.StdVectorStdVectorString_rbegin(self)

    def rend(self):
        return _Backend.StdVectorStdVectorString_rend(self)

    def clear(self):
        return _Backend.StdVectorStdVectorString_clear(self)

    def get_allocator(self):
        return _Backend.StdVectorStdVectorString_get_allocator(self)

    def pop_back(self):
        return _Backend.StdVectorStdVectorString_pop_back(self)

    def erase(self, *args):
        return _Backend.StdVectorStdVectorString_erase(self, *args)

    def __init__(self, *args):
        _Backend.StdVectorStdVectorString_swiginit(self, _Backend.new_StdVectorStdVectorString(*args))

    def push_back(self, x):
        return _Backend.StdVectorStdVectorString_push_back(self, x)

    def front(self):
        return _Backend.StdVectorStdVectorString_front(self)

    def back(self):
        return _Backend.StdVectorStdVectorString_back(self)

    def assign(self, n, x):
        return _Backend.StdVectorStdVectorString_assign(self, n, x)

    def resize(self, *args):
        return _Backend.StdVectorStdVectorString_resize(self, *args)

    def insert(self, *args):
        return _Backend.StdVectorStdVectorString_insert(self, *args)

    def reserve(self, n):
        return _Backend.StdVectorStdVectorString_reserve(self, n)

    def capacity(self):
        return _Backend.StdVectorStdVectorString_capacity(self)
    __swig_destroy__ = _Backend.delete_StdVectorStdVectorString

# Register StdVectorStdVectorString in _Backend:
_Backend.StdVectorStdVectorString_swigregister(StdVectorStdVectorString)

class StdVectorDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Backend.StdVectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Backend.StdVectorDouble___nonzero__(self)

    def __bool__(self):
        return _Backend.StdVectorDouble___bool__(self)

    def __len__(self):
        return _Backend.StdVectorDouble___len__(self)

    def __getslice__(self, i, j):
        return _Backend.StdVectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Backend.StdVectorDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Backend.StdVectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Backend.StdVectorDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Backend.StdVectorDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Backend.StdVectorDouble___setitem__(self, *args)

    def pop(self):
        return _Backend.StdVectorDouble_pop(self)

    def append(self, x):
        return _Backend.StdVectorDouble_append(self, x)

    def empty(self):
        return _Backend.StdVectorDouble_empty(self)

    def size(self):
        return _Backend.StdVectorDouble_size(self)

    def swap(self, v):
        return _Backend.StdVectorDouble_swap(self, v)

    def begin(self):
        return _Backend.StdVectorDouble_begin(self)

    def end(self):
        return _Backend.StdVectorDouble_end(self)

    def rbegin(self):
        return _Backend.StdVectorDouble_rbegin(self)

    def rend(self):
        return _Backend.StdVectorDouble_rend(self)

    def clear(self):
        return _Backend.StdVectorDouble_clear(self)

    def get_allocator(self):
        return _Backend.StdVectorDouble_get_allocator(self)

    def pop_back(self):
        return _Backend.StdVectorDouble_pop_back(self)

    def erase(self, *args):
        return _Backend.StdVectorDouble_erase(self, *args)

    def __init__(self, *args):
        _Backend.StdVectorDouble_swiginit(self, _Backend.new_StdVectorDouble(*args))

    def push_back(self, x):
        return _Backend.StdVectorDouble_push_back(self, x)

    def front(self):
        return _Backend.StdVectorDouble_front(self)

    def back(self):
        return _Backend.StdVectorDouble_back(self)

    def assign(self, n, x):
        return _Backend.StdVectorDouble_assign(self, n, x)

    def resize(self, *args):
        return _Backend.StdVectorDouble_resize(self, *args)

    def insert(self, *args):
        return _Backend.StdVectorDouble_insert(self, *args)

    def reserve(self, n):
        return _Backend.StdVectorDouble_reserve(self, n)

    def capacity(self):
        return _Backend.StdVectorDouble_capacity(self)
    __swig_destroy__ = _Backend.delete_StdVectorDouble

# Register StdVectorDouble in _Backend:
_Backend.StdVectorDouble_swigregister(StdVectorDouble)

class StdVectorInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Backend.StdVectorInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Backend.StdVectorInt___nonzero__(self)

    def __bool__(self):
        return _Backend.StdVectorInt___bool__(self)

    def __len__(self):
        return _Backend.StdVectorInt___len__(self)

    def __getslice__(self, i, j):
        return _Backend.StdVectorInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Backend.StdVectorInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Backend.StdVectorInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Backend.StdVectorInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Backend.StdVectorInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Backend.StdVectorInt___setitem__(self, *args)

    def pop(self):
        return _Backend.StdVectorInt_pop(self)

    def append(self, x):
        return _Backend.StdVectorInt_append(self, x)

    def empty(self):
        return _Backend.StdVectorInt_empty(self)

    def size(self):
        return _Backend.StdVectorInt_size(self)

    def swap(self, v):
        return _Backend.StdVectorInt_swap(self, v)

    def begin(self):
        return _Backend.StdVectorInt_begin(self)

    def end(self):
        return _Backend.StdVectorInt_end(self)

    def rbegin(self):
        return _Backend.StdVectorInt_rbegin(self)

    def rend(self):
        return _Backend.StdVectorInt_rend(self)

    def clear(self):
        return _Backend.StdVectorInt_clear(self)

    def get_allocator(self):
        return _Backend.StdVectorInt_get_allocator(self)

    def pop_back(self):
        return _Backend.StdVectorInt_pop_back(self)

    def erase(self, *args):
        return _Backend.StdVectorInt_erase(self, *args)

    def __init__(self, *args):
        _Backend.StdVectorInt_swiginit(self, _Backend.new_StdVectorInt(*args))

    def push_back(self, x):
        return _Backend.StdVectorInt_push_back(self, x)

    def front(self):
        return _Backend.StdVectorInt_front(self)

    def back(self):
        return _Backend.StdVectorInt_back(self)

    def assign(self, n, x):
        return _Backend.StdVectorInt_assign(self, n, x)

    def resize(self, *args):
        return _Backend.StdVectorInt_resize(self, *args)

    def insert(self, *args):
        return _Backend.StdVectorInt_insert(self, *args)

    def reserve(self, n):
        return _Backend.StdVectorInt_reserve(self, n)

    def capacity(self):
        return _Backend.StdVectorInt_capacity(self)
    __swig_destroy__ = _Backend.delete_StdVectorInt

# Register StdVectorInt in _Backend:
_Backend.StdVectorInt_swigregister(StdVectorInt)

class StdVectorBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Backend.StdVectorBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Backend.StdVectorBool___nonzero__(self)

    def __bool__(self):
        return _Backend.StdVectorBool___bool__(self)

    def __len__(self):
        return _Backend.StdVectorBool___len__(self)

    def __getslice__(self, i, j):
        return _Backend.StdVectorBool___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Backend.StdVectorBool___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Backend.StdVectorBool___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Backend.StdVectorBool___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Backend.StdVectorBool___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Backend.StdVectorBool___setitem__(self, *args)

    def pop(self):
        return _Backend.StdVectorBool_pop(self)

    def append(self, x):
        return _Backend.StdVectorBool_append(self, x)

    def empty(self):
        return _Backend.StdVectorBool_empty(self)

    def size(self):
        return _Backend.StdVectorBool_size(self)

    def swap(self, v):
        return _Backend.StdVectorBool_swap(self, v)

    def begin(self):
        return _Backend.StdVectorBool_begin(self)

    def end(self):
        return _Backend.StdVectorBool_end(self)

    def rbegin(self):
        return _Backend.StdVectorBool_rbegin(self)

    def rend(self):
        return _Backend.StdVectorBool_rend(self)

    def clear(self):
        return _Backend.StdVectorBool_clear(self)

    def get_allocator(self):
        return _Backend.StdVectorBool_get_allocator(self)

    def pop_back(self):
        return _Backend.StdVectorBool_pop_back(self)

    def erase(self, *args):
        return _Backend.StdVectorBool_erase(self, *args)

    def __init__(self, *args):
        _Backend.StdVectorBool_swiginit(self, _Backend.new_StdVectorBool(*args))

    def push_back(self, x):
        return _Backend.StdVectorBool_push_back(self, x)

    def front(self):
        return _Backend.StdVectorBool_front(self)

    def back(self):
        return _Backend.StdVectorBool_back(self)

    def assign(self, n, x):
        return _Backend.StdVectorBool_assign(self, n, x)

    def resize(self, *args):
        return _Backend.StdVectorBool_resize(self, *args)

    def insert(self, *args):
        return _Backend.StdVectorBool_insert(self, *args)

    def reserve(self, n):
        return _Backend.StdVectorBool_reserve(self, n)

    def capacity(self):
        return _Backend.StdVectorBool_capacity(self)
    __swig_destroy__ = _Backend.delete_StdVectorBool

# Register StdVectorBool in _Backend:
_Backend.StdVectorBool_swigregister(StdVectorBool)

class StdVectorProcess(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Backend.StdVectorProcess_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Backend.StdVectorProcess___nonzero__(self)

    def __bool__(self):
        return _Backend.StdVectorProcess___bool__(self)

    def __len__(self):
        return _Backend.StdVectorProcess___len__(self)

    def __getslice__(self, i, j):
        return _Backend.StdVectorProcess___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Backend.StdVectorProcess___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Backend.StdVectorProcess___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Backend.StdVectorProcess___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Backend.StdVectorProcess___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Backend.StdVectorProcess___setitem__(self, *args)

    def pop(self):
        return _Backend.StdVectorProcess_pop(self)

    def append(self, x):
        return _Backend.StdVectorProcess_append(self, x)

    def empty(self):
        return _Backend.StdVectorProcess_empty(self)

    def size(self):
        return _Backend.StdVectorProcess_size(self)

    def swap(self, v):
        return _Backend.StdVectorProcess_swap(self, v)

    def begin(self):
        return _Backend.StdVectorProcess_begin(self)

    def end(self):
        return _Backend.StdVectorProcess_end(self)

    def rbegin(self):
        return _Backend.StdVectorProcess_rbegin(self)

    def rend(self):
        return _Backend.StdVectorProcess_rend(self)

    def clear(self):
        return _Backend.StdVectorProcess_clear(self)

    def get_allocator(self):
        return _Backend.StdVectorProcess_get_allocator(self)

    def pop_back(self):
        return _Backend.StdVectorProcess_pop_back(self)

    def erase(self, *args):
        return _Backend.StdVectorProcess_erase(self, *args)

    def __init__(self, *args):
        _Backend.StdVectorProcess_swiginit(self, _Backend.new_StdVectorProcess(*args))

    def push_back(self, x):
        return _Backend.StdVectorProcess_push_back(self, x)

    def front(self):
        return _Backend.StdVectorProcess_front(self)

    def back(self):
        return _Backend.StdVectorProcess_back(self)

    def assign(self, n, x):
        return _Backend.StdVectorProcess_assign(self, n, x)

    def resize(self, *args):
        return _Backend.StdVectorProcess_resize(self, *args)

    def insert(self, *args):
        return _Backend.StdVectorProcess_insert(self, *args)

    def reserve(self, n):
        return _Backend.StdVectorProcess_reserve(self, n)

    def capacity(self):
        return _Backend.StdVectorProcess_capacity(self)
    __swig_destroy__ = _Backend.delete_StdVectorProcess

# Register StdVectorProcess in _Backend:
_Backend.StdVectorProcess_swigregister(StdVectorProcess)

class StdVectorProcessPtr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Backend.StdVectorProcessPtr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Backend.StdVectorProcessPtr___nonzero__(self)

    def __bool__(self):
        return _Backend.StdVectorProcessPtr___bool__(self)

    def __len__(self):
        return _Backend.StdVectorProcessPtr___len__(self)

    def __getslice__(self, i, j):
        return _Backend.StdVectorProcessPtr___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Backend.StdVectorProcessPtr___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Backend.StdVectorProcessPtr___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Backend.StdVectorProcessPtr___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Backend.StdVectorProcessPtr___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Backend.StdVectorProcessPtr___setitem__(self, *args)

    def pop(self):
        return _Backend.StdVectorProcessPtr_pop(self)

    def append(self, x):
        return _Backend.StdVectorProcessPtr_append(self, x)

    def empty(self):
        return _Backend.StdVectorProcessPtr_empty(self)

    def size(self):
        return _Backend.StdVectorProcessPtr_size(self)

    def swap(self, v):
        return _Backend.StdVectorProcessPtr_swap(self, v)

    def begin(self):
        return _Backend.StdVectorProcessPtr_begin(self)

    def end(self):
        return _Backend.StdVectorProcessPtr_end(self)

    def rbegin(self):
        return _Backend.StdVectorProcessPtr_rbegin(self)

    def rend(self):
        return _Backend.StdVectorProcessPtr_rend(self)

    def clear(self):
        return _Backend.StdVectorProcessPtr_clear(self)

    def get_allocator(self):
        return _Backend.StdVectorProcessPtr_get_allocator(self)

    def pop_back(self):
        return _Backend.StdVectorProcessPtr_pop_back(self)

    def erase(self, *args):
        return _Backend.StdVectorProcessPtr_erase(self, *args)

    def __init__(self, *args):
        _Backend.StdVectorProcessPtr_swiginit(self, _Backend.new_StdVectorProcessPtr(*args))

    def push_back(self, x):
        return _Backend.StdVectorProcessPtr_push_back(self, x)

    def front(self):
        return _Backend.StdVectorProcessPtr_front(self)

    def back(self):
        return _Backend.StdVectorProcessPtr_back(self)

    def assign(self, n, x):
        return _Backend.StdVectorProcessPtr_assign(self, n, x)

    def resize(self, *args):
        return _Backend.StdVectorProcessPtr_resize(self, *args)

    def insert(self, *args):
        return _Backend.StdVectorProcessPtr_insert(self, *args)

    def reserve(self, n):
        return _Backend.StdVectorProcessPtr_reserve(self, n)

    def capacity(self):
        return _Backend.StdVectorProcessPtr_capacity(self)
    __swig_destroy__ = _Backend.delete_StdVectorProcessPtr

# Register StdVectorProcessPtr in _Backend:
_Backend.StdVectorProcessPtr_swigregister(StdVectorProcessPtr)

class StdVectorCustomRateProcess(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Backend.StdVectorCustomRateProcess_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Backend.StdVectorCustomRateProcess___nonzero__(self)

    def __bool__(self):
        return _Backend.StdVectorCustomRateProcess___bool__(self)

    def __len__(self):
        return _Backend.StdVectorCustomRateProcess___len__(self)

    def __getslice__(self, i, j):
        return _Backend.StdVectorCustomRateProcess___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Backend.StdVectorCustomRateProcess___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Backend.StdVectorCustomRateProcess___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Backend.StdVectorCustomRateProcess___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Backend.StdVectorCustomRateProcess___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Backend.StdVectorCustomRateProcess___setitem__(self, *args)

    def pop(self):
        return _Backend.StdVectorCustomRateProcess_pop(self)

    def append(self, x):
        return _Backend.StdVectorCustomRateProcess_append(self, x)

    def empty(self):
        return _Backend.StdVectorCustomRateProcess_empty(self)

    def size(self):
        return _Backend.StdVectorCustomRateProcess_size(self)

    def swap(self, v):
        return _Backend.StdVectorCustomRateProcess_swap(self, v)

    def begin(self):
        return _Backend.StdVectorCustomRateProcess_begin(self)

    def end(self):
        return _Backend.StdVectorCustomRateProcess_end(self)

    def rbegin(self):
        return _Backend.StdVectorCustomRateProcess_rbegin(self)

    def rend(self):
        return _Backend.StdVectorCustomRateProcess_rend(self)

    def clear(self):
        return _Backend.StdVectorCustomRateProcess_clear(self)

    def get_allocator(self):
        return _Backend.StdVectorCustomRateProcess_get_allocator(self)

    def pop_back(self):
        return _Backend.StdVectorCustomRateProcess_pop_back(self)

    def erase(self, *args):
        return _Backend.StdVectorCustomRateProcess_erase(self, *args)

    def __init__(self, *args):
        _Backend.StdVectorCustomRateProcess_swiginit(self, _Backend.new_StdVectorCustomRateProcess(*args))

    def push_back(self, x):
        return _Backend.StdVectorCustomRateProcess_push_back(self, x)

    def front(self):
        return _Backend.StdVectorCustomRateProcess_front(self)

    def back(self):
        return _Backend.StdVectorCustomRateProcess_back(self)

    def assign(self, n, x):
        return _Backend.StdVectorCustomRateProcess_assign(self, n, x)

    def resize(self, *args):
        return _Backend.StdVectorCustomRateProcess_resize(self, *args)

    def insert(self, *args):
        return _Backend.StdVectorCustomRateProcess_insert(self, *args)

    def reserve(self, n):
        return _Backend.StdVectorCustomRateProcess_reserve(self, n)

    def capacity(self):
        return _Backend.StdVectorCustomRateProcess_capacity(self)
    __swig_destroy__ = _Backend.delete_StdVectorCustomRateProcess

# Register StdVectorCustomRateProcess in _Backend:
_Backend.StdVectorCustomRateProcess_swigregister(StdVectorCustomRateProcess)

class StdVectorProcessBucketMatchListEntry(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Backend.StdVectorProcessBucketMatchListEntry_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Backend.StdVectorProcessBucketMatchListEntry___nonzero__(self)

    def __bool__(self):
        return _Backend.StdVectorProcessBucketMatchListEntry___bool__(self)

    def __len__(self):
        return _Backend.StdVectorProcessBucketMatchListEntry___len__(self)

    def __getslice__(self, i, j):
        return _Backend.StdVectorProcessBucketMatchListEntry___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Backend.StdVectorProcessBucketMatchListEntry___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Backend.StdVectorProcessBucketMatchListEntry___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Backend.StdVectorProcessBucketMatchListEntry___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Backend.StdVectorProcessBucketMatchListEntry___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Backend.StdVectorProcessBucketMatchListEntry___setitem__(self, *args)

    def pop(self):
        return _Backend.StdVectorProcessBucketMatchListEntry_pop(self)

    def append(self, x):
        return _Backend.StdVectorProcessBucketMatchListEntry_append(self, x)

    def empty(self):
        return _Backend.StdVectorProcessBucketMatchListEntry_empty(self)

    def size(self):
        return _Backend.StdVectorProcessBucketMatchListEntry_size(self)

    def swap(self, v):
        return _Backend.StdVectorProcessBucketMatchListEntry_swap(self, v)

    def begin(self):
        return _Backend.StdVectorProcessBucketMatchListEntry_begin(self)

    def end(self):
        return _Backend.StdVectorProcessBucketMatchListEntry_end(self)

    def rbegin(self):
        return _Backend.StdVectorProcessBucketMatchListEntry_rbegin(self)

    def rend(self):
        return _Backend.StdVectorProcessBucketMatchListEntry_rend(self)

    def clear(self):
        return _Backend.StdVectorProcessBucketMatchListEntry_clear(self)

    def get_allocator(self):
        return _Backend.StdVectorProcessBucketMatchListEntry_get_allocator(self)

    def pop_back(self):
        return _Backend.StdVectorProcessBucketMatchListEntry_pop_back(self)

    def erase(self, *args):
        return _Backend.StdVectorProcessBucketMatchListEntry_erase(self, *args)

    def __init__(self, *args):
        _Backend.StdVectorProcessBucketMatchListEntry_swiginit(self, _Backend.new_StdVectorProcessBucketMatchListEntry(*args))

    def push_back(self, x):
        return _Backend.StdVectorProcessBucketMatchListEntry_push_back(self, x)

    def front(self):
        return _Backend.StdVectorProcessBucketMatchListEntry_front(self)

    def back(self):
        return _Backend.StdVectorProcessBucketMatchListEntry_back(self)

    def assign(self, n, x):
        return _Backend.StdVectorProcessBucketMatchListEntry_assign(self, n, x)

    def resize(self, *args):
        return _Backend.StdVectorProcessBucketMatchListEntry_resize(self, *args)

    def insert(self, *args):
        return _Backend.StdVectorProcessBucketMatchListEntry_insert(self, *args)

    def reserve(self, n):
        return _Backend.StdVectorProcessBucketMatchListEntry_reserve(self, n)

    def capacity(self):
        return _Backend.StdVectorProcessBucketMatchListEntry_capacity(self)
    __swig_destroy__ = _Backend.delete_StdVectorProcessBucketMatchListEntry

# Register StdVectorProcessBucketMatchListEntry in _Backend:
_Backend.StdVectorProcessBucketMatchListEntry_swigregister(StdVectorProcessBucketMatchListEntry)

class StdVectorConfigBucketMatchListEntry(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Backend.StdVectorConfigBucketMatchListEntry_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Backend.StdVectorConfigBucketMatchListEntry___nonzero__(self)

    def __bool__(self):
        return _Backend.StdVectorConfigBucketMatchListEntry___bool__(self)

    def __len__(self):
        return _Backend.StdVectorConfigBucketMatchListEntry___len__(self)

    def __getslice__(self, i, j):
        return _Backend.StdVectorConfigBucketMatchListEntry___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Backend.StdVectorConfigBucketMatchListEntry___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Backend.StdVectorConfigBucketMatchListEntry___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Backend.StdVectorConfigBucketMatchListEntry___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Backend.StdVectorConfigBucketMatchListEntry___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Backend.StdVectorConfigBucketMatchListEntry___setitem__(self, *args)

    def pop(self):
        return _Backend.StdVectorConfigBucketMatchListEntry_pop(self)

    def append(self, x):
        return _Backend.StdVectorConfigBucketMatchListEntry_append(self, x)

    def empty(self):
        return _Backend.StdVectorConfigBucketMatchListEntry_empty(self)

    def size(self):
        return _Backend.StdVectorConfigBucketMatchListEntry_size(self)

    def swap(self, v):
        return _Backend.StdVectorConfigBucketMatchListEntry_swap(self, v)

    def begin(self):
        return _Backend.StdVectorConfigBucketMatchListEntry_begin(self)

    def end(self):
        return _Backend.StdVectorConfigBucketMatchListEntry_end(self)

    def rbegin(self):
        return _Backend.StdVectorConfigBucketMatchListEntry_rbegin(self)

    def rend(self):
        return _Backend.StdVectorConfigBucketMatchListEntry_rend(self)

    def clear(self):
        return _Backend.StdVectorConfigBucketMatchListEntry_clear(self)

    def get_allocator(self):
        return _Backend.StdVectorConfigBucketMatchListEntry_get_allocator(self)

    def pop_back(self):
        return _Backend.StdVectorConfigBucketMatchListEntry_pop_back(self)

    def erase(self, *args):
        return _Backend.StdVectorConfigBucketMatchListEntry_erase(self, *args)

    def __init__(self, *args):
        _Backend.StdVectorConfigBucketMatchListEntry_swiginit(self, _Backend.new_StdVectorConfigBucketMatchListEntry(*args))

    def push_back(self, x):
        return _Backend.StdVectorConfigBucketMatchListEntry_push_back(self, x)

    def front(self):
        return _Backend.StdVectorConfigBucketMatchListEntry_front(self)

    def back(self):
        return _Backend.StdVectorConfigBucketMatchListEntry_back(self)

    def assign(self, n, x):
        return _Backend.StdVectorConfigBucketMatchListEntry_assign(self, n, x)

    def resize(self, *args):
        return _Backend.StdVectorConfigBucketMatchListEntry_resize(self, *args)

    def insert(self, *args):
        return _Backend.StdVectorConfigBucketMatchListEntry_insert(self, *args)

    def reserve(self, n):
        return _Backend.StdVectorConfigBucketMatchListEntry_reserve(self, n)

    def capacity(self):
        return _Backend.StdVectorConfigBucketMatchListEntry_capacity(self)
    __swig_destroy__ = _Backend.delete_StdVectorConfigBucketMatchListEntry

# Register StdVectorConfigBucketMatchListEntry in _Backend:
_Backend.StdVectorConfigBucketMatchListEntry_swigregister(StdVectorConfigBucketMatchListEntry)

class StdVectorStdVectorInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Backend.StdVectorStdVectorInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Backend.StdVectorStdVectorInt___nonzero__(self)

    def __bool__(self):
        return _Backend.StdVectorStdVectorInt___bool__(self)

    def __len__(self):
        return _Backend.StdVectorStdVectorInt___len__(self)

    def __getslice__(self, i, j):
        return _Backend.StdVectorStdVectorInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Backend.StdVectorStdVectorInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Backend.StdVectorStdVectorInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Backend.StdVectorStdVectorInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Backend.StdVectorStdVectorInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Backend.StdVectorStdVectorInt___setitem__(self, *args)

    def pop(self):
        return _Backend.StdVectorStdVectorInt_pop(self)

    def append(self, x):
        return _Backend.StdVectorStdVectorInt_append(self, x)

    def empty(self):
        return _Backend.StdVectorStdVectorInt_empty(self)

    def size(self):
        return _Backend.StdVectorStdVectorInt_size(self)

    def swap(self, v):
        return _Backend.StdVectorStdVectorInt_swap(self, v)

    def begin(self):
        return _Backend.StdVectorStdVectorInt_begin(self)

    def end(self):
        return _Backend.StdVectorStdVectorInt_end(self)

    def rbegin(self):
        return _Backend.StdVectorStdVectorInt_rbegin(self)

    def rend(self):
        return _Backend.StdVectorStdVectorInt_rend(self)

    def clear(self):
        return _Backend.StdVectorStdVectorInt_clear(self)

    def get_allocator(self):
        return _Backend.StdVectorStdVectorInt_get_allocator(self)

    def pop_back(self):
        return _Backend.StdVectorStdVectorInt_pop_back(self)

    def erase(self, *args):
        return _Backend.StdVectorStdVectorInt_erase(self, *args)

    def __init__(self, *args):
        _Backend.StdVectorStdVectorInt_swiginit(self, _Backend.new_StdVectorStdVectorInt(*args))

    def push_back(self, x):
        return _Backend.StdVectorStdVectorInt_push_back(self, x)

    def front(self):
        return _Backend.StdVectorStdVectorInt_front(self)

    def back(self):
        return _Backend.StdVectorStdVectorInt_back(self)

    def assign(self, n, x):
        return _Backend.StdVectorStdVectorInt_assign(self, n, x)

    def resize(self, *args):
        return _Backend.StdVectorStdVectorInt_resize(self, *args)

    def insert(self, *args):
        return _Backend.StdVectorStdVectorInt_insert(self, *args)

    def reserve(self, n):
        return _Backend.StdVectorStdVectorInt_reserve(self, n)

    def capacity(self):
        return _Backend.StdVectorStdVectorInt_capacity(self)
    __swig_destroy__ = _Backend.delete_StdVectorStdVectorInt

# Register StdVectorStdVectorInt in _Backend:
_Backend.StdVectorStdVectorInt_swigregister(StdVectorStdVectorInt)

class StdVectorStdVectorDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Backend.StdVectorStdVectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Backend.StdVectorStdVectorDouble___nonzero__(self)

    def __bool__(self):
        return _Backend.StdVectorStdVectorDouble___bool__(self)

    def __len__(self):
        return _Backend.StdVectorStdVectorDouble___len__(self)

    def __getslice__(self, i, j):
        return _Backend.StdVectorStdVectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Backend.StdVectorStdVectorDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Backend.StdVectorStdVectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Backend.StdVectorStdVectorDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Backend.StdVectorStdVectorDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Backend.StdVectorStdVectorDouble___setitem__(self, *args)

    def pop(self):
        return _Backend.StdVectorStdVectorDouble_pop(self)

    def append(self, x):
        return _Backend.StdVectorStdVectorDouble_append(self, x)

    def empty(self):
        return _Backend.StdVectorStdVectorDouble_empty(self)

    def size(self):
        return _Backend.StdVectorStdVectorDouble_size(self)

    def swap(self, v):
        return _Backend.StdVectorStdVectorDouble_swap(self, v)

    def begin(self):
        return _Backend.StdVectorStdVectorDouble_begin(self)

    def end(self):
        return _Backend.StdVectorStdVectorDouble_end(self)

    def rbegin(self):
        return _Backend.StdVectorStdVectorDouble_rbegin(self)

    def rend(self):
        return _Backend.StdVectorStdVectorDouble_rend(self)

    def clear(self):
        return _Backend.StdVectorStdVectorDouble_clear(self)

    def get_allocator(self):
        return _Backend.StdVectorStdVectorDouble_get_allocator(self)

    def pop_back(self):
        return _Backend.StdVectorStdVectorDouble_pop_back(self)

    def erase(self, *args):
        return _Backend.StdVectorStdVectorDouble_erase(self, *args)

    def __init__(self, *args):
        _Backend.StdVectorStdVectorDouble_swiginit(self, _Backend.new_StdVectorStdVectorDouble(*args))

    def push_back(self, x):
        return _Backend.StdVectorStdVectorDouble_push_back(self, x)

    def front(self):
        return _Backend.StdVectorStdVectorDouble_front(self)

    def back(self):
        return _Backend.StdVectorStdVectorDouble_back(self)

    def assign(self, n, x):
        return _Backend.StdVectorStdVectorDouble_assign(self, n, x)

    def resize(self, *args):
        return _Backend.StdVectorStdVectorDouble_resize(self, *args)

    def insert(self, *args):
        return _Backend.StdVectorStdVectorDouble_insert(self, *args)

    def reserve(self, n):
        return _Backend.StdVectorStdVectorDouble_reserve(self, n)

    def capacity(self):
        return _Backend.StdVectorStdVectorDouble_capacity(self)
    __swig_destroy__ = _Backend.delete_StdVectorStdVectorDouble

# Register StdVectorStdVectorDouble in _Backend:
_Backend.StdVectorStdVectorDouble_swigregister(StdVectorStdVectorDouble)

class StdVectorCoordinate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Backend.StdVectorCoordinate_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Backend.StdVectorCoordinate___nonzero__(self)

    def __bool__(self):
        return _Backend.StdVectorCoordinate___bool__(self)

    def __len__(self):
        return _Backend.StdVectorCoordinate___len__(self)

    def __getslice__(self, i, j):
        return _Backend.StdVectorCoordinate___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Backend.StdVectorCoordinate___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Backend.StdVectorCoordinate___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Backend.StdVectorCoordinate___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Backend.StdVectorCoordinate___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Backend.StdVectorCoordinate___setitem__(self, *args)

    def pop(self):
        return _Backend.StdVectorCoordinate_pop(self)

    def append(self, x):
        return _Backend.StdVectorCoordinate_append(self, x)

    def empty(self):
        return _Backend.StdVectorCoordinate_empty(self)

    def size(self):
        return _Backend.StdVectorCoordinate_size(self)

    def swap(self, v):
        return _Backend.StdVectorCoordinate_swap(self, v)

    def begin(self):
        return _Backend.StdVectorCoordinate_begin(self)

    def end(self):
        return _Backend.StdVectorCoordinate_end(self)

    def rbegin(self):
        return _Backend.StdVectorCoordinate_rbegin(self)

    def rend(self):
        return _Backend.StdVectorCoordinate_rend(self)

    def clear(self):
        return _Backend.StdVectorCoordinate_clear(self)

    def get_allocator(self):
        return _Backend.StdVectorCoordinate_get_allocator(self)

    def pop_back(self):
        return _Backend.StdVectorCoordinate_pop_back(self)

    def erase(self, *args):
        return _Backend.StdVectorCoordinate_erase(self, *args)

    def __init__(self, *args):
        _Backend.StdVectorCoordinate_swiginit(self, _Backend.new_StdVectorCoordinate(*args))

    def push_back(self, x):
        return _Backend.StdVectorCoordinate_push_back(self, x)

    def front(self):
        return _Backend.StdVectorCoordinate_front(self)

    def back(self):
        return _Backend.StdVectorCoordinate_back(self)

    def assign(self, n, x):
        return _Backend.StdVectorCoordinate_assign(self, n, x)

    def resize(self, *args):
        return _Backend.StdVectorCoordinate_resize(self, *args)

    def insert(self, *args):
        return _Backend.StdVectorCoordinate_insert(self, *args)

    def reserve(self, n):
        return _Backend.StdVectorCoordinate_reserve(self, n)

    def capacity(self):
        return _Backend.StdVectorCoordinate_capacity(self)
    __swig_destroy__ = _Backend.delete_StdVectorCoordinate

# Register StdVectorCoordinate in _Backend:
_Backend.StdVectorCoordinate_swigregister(StdVectorCoordinate)

class StdVectorStdPairCoordinate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Backend.StdVectorStdPairCoordinate_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Backend.StdVectorStdPairCoordinate___nonzero__(self)

    def __bool__(self):
        return _Backend.StdVectorStdPairCoordinate___bool__(self)

    def __len__(self):
        return _Backend.StdVectorStdPairCoordinate___len__(self)

    def __getslice__(self, i, j):
        return _Backend.StdVectorStdPairCoordinate___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Backend.StdVectorStdPairCoordinate___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Backend.StdVectorStdPairCoordinate___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Backend.StdVectorStdPairCoordinate___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Backend.StdVectorStdPairCoordinate___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Backend.StdVectorStdPairCoordinate___setitem__(self, *args)

    def pop(self):
        return _Backend.StdVectorStdPairCoordinate_pop(self)

    def append(self, x):
        return _Backend.StdVectorStdPairCoordinate_append(self, x)

    def empty(self):
        return _Backend.StdVectorStdPairCoordinate_empty(self)

    def size(self):
        return _Backend.StdVectorStdPairCoordinate_size(self)

    def swap(self, v):
        return _Backend.StdVectorStdPairCoordinate_swap(self, v)

    def begin(self):
        return _Backend.StdVectorStdPairCoordinate_begin(self)

    def end(self):
        return _Backend.StdVectorStdPairCoordinate_end(self)

    def rbegin(self):
        return _Backend.StdVectorStdPairCoordinate_rbegin(self)

    def rend(self):
        return _Backend.StdVectorStdPairCoordinate_rend(self)

    def clear(self):
        return _Backend.StdVectorStdPairCoordinate_clear(self)

    def get_allocator(self):
        return _Backend.StdVectorStdPairCoordinate_get_allocator(self)

    def pop_back(self):
        return _Backend.StdVectorStdPairCoordinate_pop_back(self)

    def erase(self, *args):
        return _Backend.StdVectorStdPairCoordinate_erase(self, *args)

    def __init__(self, *args):
        _Backend.StdVectorStdPairCoordinate_swiginit(self, _Backend.new_StdVectorStdPairCoordinate(*args))

    def push_back(self, x):
        return _Backend.StdVectorStdPairCoordinate_push_back(self, x)

    def front(self):
        return _Backend.StdVectorStdPairCoordinate_front(self)

    def back(self):
        return _Backend.StdVectorStdPairCoordinate_back(self)

    def assign(self, n, x):
        return _Backend.StdVectorStdPairCoordinate_assign(self, n, x)

    def resize(self, *args):
        return _Backend.StdVectorStdPairCoordinate_resize(self, *args)

    def insert(self, *args):
        return _Backend.StdVectorStdPairCoordinate_insert(self, *args)

    def reserve(self, n):
        return _Backend.StdVectorStdPairCoordinate_reserve(self, n)

    def capacity(self):
        return _Backend.StdVectorStdPairCoordinate_capacity(self)
    __swig_destroy__ = _Backend.delete_StdVectorStdPairCoordinate

# Register StdVectorStdPairCoordinate in _Backend:
_Backend.StdVectorStdPairCoordinate_swigregister(StdVectorStdPairCoordinate)

class StdVectorStdVectorCoordinate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Backend.StdVectorStdVectorCoordinate_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Backend.StdVectorStdVectorCoordinate___nonzero__(self)

    def __bool__(self):
        return _Backend.StdVectorStdVectorCoordinate___bool__(self)

    def __len__(self):
        return _Backend.StdVectorStdVectorCoordinate___len__(self)

    def __getslice__(self, i, j):
        return _Backend.StdVectorStdVectorCoordinate___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Backend.StdVectorStdVectorCoordinate___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Backend.StdVectorStdVectorCoordinate___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Backend.StdVectorStdVectorCoordinate___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Backend.StdVectorStdVectorCoordinate___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Backend.StdVectorStdVectorCoordinate___setitem__(self, *args)

    def pop(self):
        return _Backend.StdVectorStdVectorCoordinate_pop(self)

    def append(self, x):
        return _Backend.StdVectorStdVectorCoordinate_append(self, x)

    def empty(self):
        return _Backend.StdVectorStdVectorCoordinate_empty(self)

    def size(self):
        return _Backend.StdVectorStdVectorCoordinate_size(self)

    def swap(self, v):
        return _Backend.StdVectorStdVectorCoordinate_swap(self, v)

    def begin(self):
        return _Backend.StdVectorStdVectorCoordinate_begin(self)

    def end(self):
        return _Backend.StdVectorStdVectorCoordinate_end(self)

    def rbegin(self):
        return _Backend.StdVectorStdVectorCoordinate_rbegin(self)

    def rend(self):
        return _Backend.StdVectorStdVectorCoordinate_rend(self)

    def clear(self):
        return _Backend.StdVectorStdVectorCoordinate_clear(self)

    def get_allocator(self):
        return _Backend.StdVectorStdVectorCoordinate_get_allocator(self)

    def pop_back(self):
        return _Backend.StdVectorStdVectorCoordinate_pop_back(self)

    def erase(self, *args):
        return _Backend.StdVectorStdVectorCoordinate_erase(self, *args)

    def __init__(self, *args):
        _Backend.StdVectorStdVectorCoordinate_swiginit(self, _Backend.new_StdVectorStdVectorCoordinate(*args))

    def push_back(self, x):
        return _Backend.StdVectorStdVectorCoordinate_push_back(self, x)

    def front(self):
        return _Backend.StdVectorStdVectorCoordinate_front(self)

    def back(self):
        return _Backend.StdVectorStdVectorCoordinate_back(self)

    def assign(self, n, x):
        return _Backend.StdVectorStdVectorCoordinate_assign(self, n, x)

    def resize(self, *args):
        return _Backend.StdVectorStdVectorCoordinate_resize(self, *args)

    def insert(self, *args):
        return _Backend.StdVectorStdVectorCoordinate_insert(self, *args)

    def reserve(self, n):
        return _Backend.StdVectorStdVectorCoordinate_reserve(self, n)

    def capacity(self):
        return _Backend.StdVectorStdVectorCoordinate_capacity(self)
    __swig_destroy__ = _Backend.delete_StdVectorStdVectorCoordinate

# Register StdVectorStdVectorCoordinate in _Backend:
_Backend.StdVectorStdVectorCoordinate_swigregister(StdVectorStdVectorCoordinate)

class StdMapStringInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Backend.StdMapStringInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Backend.StdMapStringInt___nonzero__(self)

    def __bool__(self):
        return _Backend.StdMapStringInt___bool__(self)

    def __len__(self):
        return _Backend.StdMapStringInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _Backend.StdMapStringInt___getitem__(self, key)

    def __delitem__(self, key):
        return _Backend.StdMapStringInt___delitem__(self, key)

    def has_key(self, key):
        return _Backend.StdMapStringInt_has_key(self, key)

    def keys(self):
        return _Backend.StdMapStringInt_keys(self)

    def values(self):
        return _Backend.StdMapStringInt_values(self)

    def items(self):
        return _Backend.StdMapStringInt_items(self)

    def __contains__(self, key):
        return _Backend.StdMapStringInt___contains__(self, key)

    def key_iterator(self):
        return _Backend.StdMapStringInt_key_iterator(self)

    def value_iterator(self):
        return _Backend.StdMapStringInt_value_iterator(self)

    def __setitem__(self, *args):
        return _Backend.StdMapStringInt___setitem__(self, *args)

    def asdict(self):
        return _Backend.StdMapStringInt_asdict(self)

    def __init__(self, *args):
        _Backend.StdMapStringInt_swiginit(self, _Backend.new_StdMapStringInt(*args))

    def empty(self):
        return _Backend.StdMapStringInt_empty(self)

    def size(self):
        return _Backend.StdMapStringInt_size(self)

    def swap(self, v):
        return _Backend.StdMapStringInt_swap(self, v)

    def begin(self):
        return _Backend.StdMapStringInt_begin(self)

    def end(self):
        return _Backend.StdMapStringInt_end(self)

    def rbegin(self):
        return _Backend.StdMapStringInt_rbegin(self)

    def rend(self):
        return _Backend.StdMapStringInt_rend(self)

    def clear(self):
        return _Backend.StdMapStringInt_clear(self)

    def get_allocator(self):
        return _Backend.StdMapStringInt_get_allocator(self)

    def count(self, x):
        return _Backend.StdMapStringInt_count(self, x)

    def erase(self, *args):
        return _Backend.StdMapStringInt_erase(self, *args)

    def find(self, x):
        return _Backend.StdMapStringInt_find(self, x)

    def lower_bound(self, x):
        return _Backend.StdMapStringInt_lower_bound(self, x)

    def upper_bound(self, x):
        return _Backend.StdMapStringInt_upper_bound(self, x)
    __swig_destroy__ = _Backend.delete_StdMapStringInt

# Register StdMapStringInt in _Backend:
_Backend.StdMapStringInt_swigregister(StdMapStringInt)

class StdVectorStdMapStringInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Backend.StdVectorStdMapStringInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Backend.StdVectorStdMapStringInt___nonzero__(self)

    def __bool__(self):
        return _Backend.StdVectorStdMapStringInt___bool__(self)

    def __len__(self):
        return _Backend.StdVectorStdMapStringInt___len__(self)

    def __getslice__(self, i, j):
        return _Backend.StdVectorStdMapStringInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Backend.StdVectorStdMapStringInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Backend.StdVectorStdMapStringInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Backend.StdVectorStdMapStringInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Backend.StdVectorStdMapStringInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Backend.StdVectorStdMapStringInt___setitem__(self, *args)

    def pop(self):
        return _Backend.StdVectorStdMapStringInt_pop(self)

    def append(self, x):
        return _Backend.StdVectorStdMapStringInt_append(self, x)

    def empty(self):
        return _Backend.StdVectorStdMapStringInt_empty(self)

    def size(self):
        return _Backend.StdVectorStdMapStringInt_size(self)

    def swap(self, v):
        return _Backend.StdVectorStdMapStringInt_swap(self, v)

    def begin(self):
        return _Backend.StdVectorStdMapStringInt_begin(self)

    def end(self):
        return _Backend.StdVectorStdMapStringInt_end(self)

    def rbegin(self):
        return _Backend.StdVectorStdMapStringInt_rbegin(self)

    def rend(self):
        return _Backend.StdVectorStdMapStringInt_rend(self)

    def clear(self):
        return _Backend.StdVectorStdMapStringInt_clear(self)

    def get_allocator(self):
        return _Backend.StdVectorStdMapStringInt_get_allocator(self)

    def pop_back(self):
        return _Backend.StdVectorStdMapStringInt_pop_back(self)

    def erase(self, *args):
        return _Backend.StdVectorStdMapStringInt_erase(self, *args)

    def __init__(self, *args):
        _Backend.StdVectorStdMapStringInt_swiginit(self, _Backend.new_StdVectorStdMapStringInt(*args))

    def push_back(self, x):
        return _Backend.StdVectorStdMapStringInt_push_back(self, x)

    def front(self):
        return _Backend.StdVectorStdMapStringInt_front(self)

    def back(self):
        return _Backend.StdVectorStdMapStringInt_back(self)

    def assign(self, n, x):
        return _Backend.StdVectorStdMapStringInt_assign(self, n, x)

    def resize(self, *args):
        return _Backend.StdVectorStdMapStringInt_resize(self, *args)

    def insert(self, *args):
        return _Backend.StdVectorStdMapStringInt_insert(self, *args)

    def reserve(self, n):
        return _Backend.StdVectorStdMapStringInt_reserve(self, n)

    def capacity(self):
        return _Backend.StdVectorStdMapStringInt_capacity(self)
    __swig_destroy__ = _Backend.delete_StdVectorStdMapStringInt

# Register StdVectorStdMapStringInt in _Backend:
_Backend.StdVectorStdMapStringInt_swigregister(StdVectorStdMapStringInt)

class StdVectorStdPairIntInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Backend.StdVectorStdPairIntInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Backend.StdVectorStdPairIntInt___nonzero__(self)

    def __bool__(self):
        return _Backend.StdVectorStdPairIntInt___bool__(self)

    def __len__(self):
        return _Backend.StdVectorStdPairIntInt___len__(self)

    def __getslice__(self, i, j):
        return _Backend.StdVectorStdPairIntInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Backend.StdVectorStdPairIntInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Backend.StdVectorStdPairIntInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Backend.StdVectorStdPairIntInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Backend.StdVectorStdPairIntInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Backend.StdVectorStdPairIntInt___setitem__(self, *args)

    def pop(self):
        return _Backend.StdVectorStdPairIntInt_pop(self)

    def append(self, x):
        return _Backend.StdVectorStdPairIntInt_append(self, x)

    def empty(self):
        return _Backend.StdVectorStdPairIntInt_empty(self)

    def size(self):
        return _Backend.StdVectorStdPairIntInt_size(self)

    def swap(self, v):
        return _Backend.StdVectorStdPairIntInt_swap(self, v)

    def begin(self):
        return _Backend.StdVectorStdPairIntInt_begin(self)

    def end(self):
        return _Backend.StdVectorStdPairIntInt_end(self)

    def rbegin(self):
        return _Backend.StdVectorStdPairIntInt_rbegin(self)

    def rend(self):
        return _Backend.StdVectorStdPairIntInt_rend(self)

    def clear(self):
        return _Backend.StdVectorStdPairIntInt_clear(self)

    def get_allocator(self):
        return _Backend.StdVectorStdPairIntInt_get_allocator(self)

    def pop_back(self):
        return _Backend.StdVectorStdPairIntInt_pop_back(self)

    def erase(self, *args):
        return _Backend.StdVectorStdPairIntInt_erase(self, *args)

    def __init__(self, *args):
        _Backend.StdVectorStdPairIntInt_swiginit(self, _Backend.new_StdVectorStdPairIntInt(*args))

    def push_back(self, x):
        return _Backend.StdVectorStdPairIntInt_push_back(self, x)

    def front(self):
        return _Backend.StdVectorStdPairIntInt_front(self)

    def back(self):
        return _Backend.StdVectorStdPairIntInt_back(self)

    def assign(self, n, x):
        return _Backend.StdVectorStdPairIntInt_assign(self, n, x)

    def resize(self, *args):
        return _Backend.StdVectorStdPairIntInt_resize(self, *args)

    def insert(self, *args):
        return _Backend.StdVectorStdPairIntInt_insert(self, *args)

    def reserve(self, n):
        return _Backend.StdVectorStdPairIntInt_reserve(self, n)

    def capacity(self):
        return _Backend.StdVectorStdPairIntInt_capacity(self)
    __swig_destroy__ = _Backend.delete_StdVectorStdPairIntInt

# Register StdVectorStdPairIntInt in _Backend:
_Backend.StdVectorStdPairIntInt_swigregister(StdVectorStdPairIntInt)

class StdVectorTypeBucket(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Backend.StdVectorTypeBucket_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Backend.StdVectorTypeBucket___nonzero__(self)

    def __bool__(self):
        return _Backend.StdVectorTypeBucket___bool__(self)

    def __len__(self):
        return _Backend.StdVectorTypeBucket___len__(self)

    def __getslice__(self, i, j):
        return _Backend.StdVectorTypeBucket___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Backend.StdVectorTypeBucket___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Backend.StdVectorTypeBucket___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Backend.StdVectorTypeBucket___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Backend.StdVectorTypeBucket___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Backend.StdVectorTypeBucket___setitem__(self, *args)

    def pop(self):
        return _Backend.StdVectorTypeBucket_pop(self)

    def append(self, x):
        return _Backend.StdVectorTypeBucket_append(self, x)

    def empty(self):
        return _Backend.StdVectorTypeBucket_empty(self)

    def size(self):
        return _Backend.StdVectorTypeBucket_size(self)

    def swap(self, v):
        return _Backend.StdVectorTypeBucket_swap(self, v)

    def begin(self):
        return _Backend.StdVectorTypeBucket_begin(self)

    def end(self):
        return _Backend.StdVectorTypeBucket_end(self)

    def rbegin(self):
        return _Backend.StdVectorTypeBucket_rbegin(self)

    def rend(self):
        return _Backend.StdVectorTypeBucket_rend(self)

    def clear(self):
        return _Backend.StdVectorTypeBucket_clear(self)

    def get_allocator(self):
        return _Backend.StdVectorTypeBucket_get_allocator(self)

    def pop_back(self):
        return _Backend.StdVectorTypeBucket_pop_back(self)

    def erase(self, *args):
        return _Backend.StdVectorTypeBucket_erase(self, *args)

    def __init__(self, *args):
        _Backend.StdVectorTypeBucket_swiginit(self, _Backend.new_StdVectorTypeBucket(*args))

    def push_back(self, x):
        return _Backend.StdVectorTypeBucket_push_back(self, x)

    def front(self):
        return _Backend.StdVectorTypeBucket_front(self)

    def back(self):
        return _Backend.StdVectorTypeBucket_back(self)

    def assign(self, n, x):
        return _Backend.StdVectorTypeBucket_assign(self, n, x)

    def resize(self, *args):
        return _Backend.StdVectorTypeBucket_resize(self, *args)

    def insert(self, *args):
        return _Backend.StdVectorTypeBucket_insert(self, *args)

    def reserve(self, n):
        return _Backend.StdVectorTypeBucket_reserve(self, n)

    def capacity(self):
        return _Backend.StdVectorTypeBucket_capacity(self)
    __swig_destroy__ = _Backend.delete_StdVectorTypeBucket

# Register StdVectorTypeBucket in _Backend:
_Backend.StdVectorTypeBucket_swigregister(StdVectorTypeBucket)

class LatticeModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, configuration, simulation_timer, lattice_map, interactions):
        _Backend.LatticeModel_swiginit(self, _Backend.new_LatticeModel(configuration, simulation_timer, lattice_map, interactions))

    def singleStep(self):
        return _Backend.LatticeModel_singleStep(self)

    def propagateTime(self):
        return _Backend.LatticeModel_propagateTime(self)

    def interactions(self):
        return _Backend.LatticeModel_interactions(self)

    def configuration(self):
        return _Backend.LatticeModel_configuration(self)

    def latticeMap(self):
        return _Backend.LatticeModel_latticeMap(self)
    __swig_destroy__ = _Backend.delete_LatticeModel

# Register LatticeModel in _Backend:
_Backend.LatticeModel_swigregister(LatticeModel)

class LatticeMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, n_basis, repetitions, periodic):
        _Backend.LatticeMap_swiginit(self, _Backend.new_LatticeMap(n_basis, repetitions, periodic))

    def neighbourIndices(self, index, shells=1):
        return _Backend.LatticeMap_neighbourIndices(self, index, shells)

    def supersetNeighbourIndices(self, indices, shells):
        return _Backend.LatticeMap_supersetNeighbourIndices(self, indices, shells)

    def indicesFromCell(self, i, j, k):
        return _Backend.LatticeMap_indicesFromCell(self, i, j, k)

    def indexFromMoveInfo(self, index, i, j, k, basis):
        return _Backend.LatticeMap_indexFromMoveInfo(self, index, i, j, k, basis)

    def indexToCell(self, index, cell_i, cell_j, cell_k):
        return _Backend.LatticeMap_indexToCell(self, index, cell_i, cell_j, cell_k)

    def basisSiteFromIndex(self, index):
        return _Backend.LatticeMap_basisSiteFromIndex(self, index)

    def nBasis(self):
        return _Backend.LatticeMap_nBasis(self)

    def periodicA(self):
        return _Backend.LatticeMap_periodicA(self)

    def periodicB(self):
        return _Backend.LatticeMap_periodicB(self)

    def periodicC(self):
        return _Backend.LatticeMap_periodicC(self)

    def repetitionsA(self):
        return _Backend.LatticeMap_repetitionsA(self)

    def repetitionsB(self):
        return _Backend.LatticeMap_repetitionsB(self)

    def repetitionsC(self):
        return _Backend.LatticeMap_repetitionsC(self)

    def wrap(self, *args):
        return _Backend.LatticeMap_wrap(self, *args)
    __swig_destroy__ = _Backend.delete_LatticeMap

# Register LatticeMap in _Backend:
_Backend.LatticeMap_swigregister(LatticeMap)

class Configuration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, coordinates, elements, possible_types):
        _Backend.Configuration_swiginit(self, _Backend.new_Configuration(coordinates, elements, possible_types))

    def initMatchLists(self, lattice_map, range):
        return _Backend.Configuration_initMatchLists(self, lattice_map, range)

    def coordinates(self):
        return _Backend.Configuration_coordinates(self)

    def atomIDCoordinates(self):
        return _Backend.Configuration_atomIDCoordinates(self)

    def elements(self):
        return _Backend.Configuration_elements(self)

    def atomIDElements(self):
        return _Backend.Configuration_atomIDElements(self)

    def types(self):
        return _Backend.Configuration_types(self)

    def movedAtomIDs(self):
        return _Backend.Configuration_movedAtomIDs(self)

    def latestEventProcess(self):
        return _Backend.Configuration_latestEventProcess(self)

    def latestEventSite(self):
        return _Backend.Configuration_latestEventSite(self)

    def recentMoveVectors(self):
        return _Backend.Configuration_recentMoveVectors(self)

    def updateMatchList(self, index):
        return _Backend.Configuration_updateMatchList(self, index)

    def configMatchList(self, *args):
        return _Backend.Configuration_configMatchList(self, *args)

    def performBucketProcess(self, process, site_index, lattice_map):
        return _Backend.Configuration_performBucketProcess(self, process, site_index, lattice_map)

    def typeName(self, type):
        return _Backend.Configuration_typeName(self, type)

    def typeNames(self):
        return _Backend.Configuration_typeNames(self)

    def atomIdCoordinates(self):
        return _Backend.Configuration_atomIdCoordinates(self)

    def atomID(self):
        return _Backend.Configuration_atomID(self)

    def setUpdateInfo(self, update_info):
        return _Backend.Configuration_setUpdateInfo(self, update_info)

    def updateInfo(self):
        return _Backend.Configuration_updateInfo(self)

    def possibleTypes(self):
        return _Backend.Configuration_possibleTypes(self)

    def particlesPerType(self):
        return _Backend.Configuration_particlesPerType(self)
    __swig_destroy__ = _Backend.delete_Configuration

# Register Configuration in _Backend:
_Backend.Configuration_swigregister(Configuration)

class Interactions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Backend.Interactions_swiginit(self, _Backend.new_Interactions(*args))

    def maxRange(self):
        return _Backend.Interactions_maxRange(self)

    def useCustomRates(self):
        return _Backend.Interactions_useCustomRates(self)

    def updateProcessMatchLists(self, configuration, lattice_map):
        return _Backend.Interactions_updateProcessMatchLists(self, configuration, lattice_map)

    def processes(self, *args):
        return _Backend.Interactions_processes(self, *args)

    def rateCalculator(self):
        return _Backend.Interactions_rateCalculator(self)

    def totalAvailableSites(self):
        return _Backend.Interactions_totalAvailableSites(self)

    def probabilityTable(self):
        return _Backend.Interactions_probabilityTable(self)

    def updateProbabilityTable(self):
        return _Backend.Interactions_updateProbabilityTable(self)

    def totalRate(self):
        return _Backend.Interactions_totalRate(self)

    def pickProcessIndex(self):
        return _Backend.Interactions_pickProcessIndex(self)

    def pickProcess(self):
        return _Backend.Interactions_pickProcess(self)

    def clearMatching(self):
        return _Backend.Interactions_clearMatching(self)
    __swig_destroy__ = _Backend.delete_Interactions

# Register Interactions in _Backend:
_Backend.Interactions_swigregister(Interactions)

class Process(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Backend.Process_swiginit(self, _Backend.new_Process(*args))
    __swig_destroy__ = _Backend.delete_Process

    def totalRate(self):
        return _Backend.Process_totalRate(self)

    def addSite(self, index, rate=0.0, multiplicity=1.0):
        return _Backend.Process_addSite(self, index, rate, multiplicity)

    def removeSite(self, index):
        return _Backend.Process_removeSite(self, index)

    def clearSites(self):
        return _Backend.Process_clearSites(self)

    def pickSite(self):
        return _Backend.Process_pickSite(self)

    def updateRateTable(self):
        return _Backend.Process_updateRateTable(self)

    def cacheRate(self):
        return _Backend.Process_cacheRate(self)

    def rateConstant(self):
        return _Backend.Process_rateConstant(self)

    def nSites(self):
        return _Backend.Process_nSites(self)

    def isListed(self, index):
        return _Backend.Process_isListed(self, index)

    def sites(self):
        return _Backend.Process_sites(self)

    def processMatchList(self, *args):
        return _Backend.Process_processMatchList(self, *args)

    def affectedIndices(self, *args):
        return _Backend.Process_affectedIndices(self, *args)

    def basisSites(self):
        return _Backend.Process_basisSites(self)

    def idMoves(self, *args):
        return _Backend.Process_idMoves(self, *args)

    def cutoff(self):
        return _Backend.Process_cutoff(self)

    def range(self):
        return _Backend.Process_range(self)

    def processNumber(self):
        return _Backend.Process_processNumber(self)

    def bucketProcess(self):
        return _Backend.Process_bucketProcess(self)

# Register Process in _Backend:
_Backend.Process_swigregister(Process)

class CustomRateProcess(Process):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Backend.CustomRateProcess_swiginit(self, _Backend.new_CustomRateProcess(*args))
    __swig_destroy__ = _Backend.delete_CustomRateProcess

    def addSite(self, index, rate, multiplicity):
        return _Backend.CustomRateProcess_addSite(self, index, rate, multiplicity)

    def removeSite(self, index):
        return _Backend.CustomRateProcess_removeSite(self, index)

    def updateRateTable(self):
        return _Backend.CustomRateProcess_updateRateTable(self)

# Register CustomRateProcess in _Backend:
_Backend.CustomRateProcess_swigregister(CustomRateProcess)

class Coordinate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Backend.Coordinate_swiginit(self, _Backend.new_Coordinate(*args))

    def norm(self):
        return _Backend.Coordinate_norm(self)

    def outerProdDiag(self, other):
        return _Backend.Coordinate_outerProdDiag(self, other)

    def dot(self, other):
        return _Backend.Coordinate_dot(self, other)

    def __lt__(self, other):
        return _Backend.Coordinate___lt__(self, other)

    def __eq__(self, other):
        return _Backend.Coordinate___eq__(self, other)

    def __ne__(self, other):
        return _Backend.Coordinate___ne__(self, other)

    def __sub__(self, other):
        return _Backend.Coordinate___sub__(self, other)

    def __add__(self, other):
        return _Backend.Coordinate___add__(self, other)

    def __iadd__(self, other):
        return _Backend.Coordinate___iadd__(self, other)

    def __mul__(self, scalar):
        return _Backend.Coordinate___mul__(self, scalar)

    def x(self):
        return _Backend.Coordinate_x(self)

    def y(self):
        return _Backend.Coordinate_y(self)

    def z(self):
        return _Backend.Coordinate_z(self)

    def data(self):
        return _Backend.Coordinate_data(self)

    def distance(self, other):
        return _Backend.Coordinate_distance(self, other)

    def distanceToOrigin(self):
        return _Backend.Coordinate_distanceToOrigin(self)

    def _print(self):
        return _Backend.Coordinate__print(self)

    def __getitem__(self, i):
        return _Backend.Coordinate___getitem__(self, i)

    def __setitem__(self, i, value):
        return _Backend.Coordinate___setitem__(self, i, value)
    __swig_destroy__ = _Backend.delete_Coordinate

# Register Coordinate in _Backend:
_Backend.Coordinate_swigregister(Coordinate)


def configurationsToMatchList(first, second, range, cutoff, match_list, affected_indices):
    return _Backend.configurationsToMatchList(first, second, range, cutoff, match_list, affected_indices)

def multiplicity(process_match_list, config_match_list):
    return _Backend.multiplicity(process_match_list, config_match_list)
class TypeBucket(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Backend.delete_TypeBucket

    def __init__(self, *args):
        _Backend.TypeBucket_swiginit(self, _Backend.new_TypeBucket(*args))

    def size(self):
        return _Backend.TypeBucket_size(self)

    def identical(self, other):
        return _Backend.TypeBucket_identical(self, other)

    def __eq__(self, *args):
        return _Backend.TypeBucket___eq__(self, *args)

    def __ne__(self, other):
        return _Backend.TypeBucket___ne__(self, other)

    def greaterOrEqual(self, other):
        return _Backend.TypeBucket_greaterOrEqual(self, other)

    def lessThan(self, other):
        return _Backend.TypeBucket_lessThan(self, other)

    def match(self, other):
        return _Backend.TypeBucket_match(self, other)

    def add(self, other):
        return _Backend.TypeBucket_add(self, other)

    def __getitem__(self, i):
        return _Backend.TypeBucket___getitem__(self, i)

    def __setitem__(self, i, value):
        return _Backend.TypeBucket___setitem__(self, i, value)

    def __len__(self):
        return _Backend.TypeBucket___len__(self)

# Register TypeBucket in _Backend:
_Backend.TypeBucket_swigregister(TypeBucket)


def samePoint(*args):
    return _Backend.samePoint(*args)
class MinimalMatchListEntry(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    index = property(_Backend.MinimalMatchListEntry_index_get, _Backend.MinimalMatchListEntry_index_set)
    distance = property(_Backend.MinimalMatchListEntry_distance_get, _Backend.MinimalMatchListEntry_distance_set)
    x = property(_Backend.MinimalMatchListEntry_x_get, _Backend.MinimalMatchListEntry_x_set)
    y = property(_Backend.MinimalMatchListEntry_y_get, _Backend.MinimalMatchListEntry_y_set)
    z = property(_Backend.MinimalMatchListEntry_z_get, _Backend.MinimalMatchListEntry_z_set)
    match_types = property(_Backend.MinimalMatchListEntry_match_types_get, _Backend.MinimalMatchListEntry_match_types_set)

    def __init__(self):
        _Backend.MinimalMatchListEntry_swiginit(self, _Backend.new_MinimalMatchListEntry())
    __swig_destroy__ = _Backend.delete_MinimalMatchListEntry

# Register MinimalMatchListEntry in _Backend:
_Backend.MinimalMatchListEntry_swigregister(MinimalMatchListEntry)

class ConfigBucketMatchListEntry(MinimalMatchListEntry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Backend.ConfigBucketMatchListEntry_swiginit(self, _Backend.new_ConfigBucketMatchListEntry())
    __swig_destroy__ = _Backend.delete_ConfigBucketMatchListEntry

# Register ConfigBucketMatchListEntry in _Backend:
_Backend.ConfigBucketMatchListEntry_swigregister(ConfigBucketMatchListEntry)

class ProcessBucketMatchListEntry(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    has_move_coordinate = property(_Backend.ProcessBucketMatchListEntry_has_move_coordinate_get, _Backend.ProcessBucketMatchListEntry_has_move_coordinate_set)
    index = property(_Backend.ProcessBucketMatchListEntry_index_get, _Backend.ProcessBucketMatchListEntry_index_set)
    move_cell_i = property(_Backend.ProcessBucketMatchListEntry_move_cell_i_get, _Backend.ProcessBucketMatchListEntry_move_cell_i_set)
    move_cell_j = property(_Backend.ProcessBucketMatchListEntry_move_cell_j_get, _Backend.ProcessBucketMatchListEntry_move_cell_j_set)
    move_cell_k = property(_Backend.ProcessBucketMatchListEntry_move_cell_k_get, _Backend.ProcessBucketMatchListEntry_move_cell_k_set)
    move_basis = property(_Backend.ProcessBucketMatchListEntry_move_basis_get, _Backend.ProcessBucketMatchListEntry_move_basis_set)
    distance = property(_Backend.ProcessBucketMatchListEntry_distance_get, _Backend.ProcessBucketMatchListEntry_distance_set)
    coordinate = property(_Backend.ProcessBucketMatchListEntry_coordinate_get, _Backend.ProcessBucketMatchListEntry_coordinate_set)
    move_coordinate = property(_Backend.ProcessBucketMatchListEntry_move_coordinate_get, _Backend.ProcessBucketMatchListEntry_move_coordinate_set)
    match_types = property(_Backend.ProcessBucketMatchListEntry_match_types_get, _Backend.ProcessBucketMatchListEntry_match_types_set)
    update_types = property(_Backend.ProcessBucketMatchListEntry_update_types_get, _Backend.ProcessBucketMatchListEntry_update_types_set)

    def match(self, m2):
        return _Backend.ProcessBucketMatchListEntry_match(self, m2)

    def initWildcard(self, c):
        return _Backend.ProcessBucketMatchListEntry_initWildcard(self, c)

    def __init__(self):
        _Backend.ProcessBucketMatchListEntry_swiginit(self, _Backend.new_ProcessBucketMatchListEntry())
    __swig_destroy__ = _Backend.delete_ProcessBucketMatchListEntry

# Register ProcessBucketMatchListEntry in _Backend:
_Backend.ProcessBucketMatchListEntry_swigregister(ProcessBucketMatchListEntry)

class SimulationTimer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Backend.SimulationTimer_swiginit(self, _Backend.new_SimulationTimer())

    def propagateTime(self, total_rate):
        return _Backend.SimulationTimer_propagateTime(self, total_rate)

    def simulationTime(self):
        return _Backend.SimulationTimer_simulationTime(self)
    __swig_destroy__ = _Backend.delete_SimulationTimer

# Register SimulationTimer in _Backend:
_Backend.SimulationTimer_swigregister(SimulationTimer)

class RateCalculator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == RateCalculator:
            _self = None
        else:
            _self = self
        _Backend.RateCalculator_swiginit(self, _Backend.new_RateCalculator(_self, ))
    __swig_destroy__ = _Backend.delete_RateCalculator

    def backendRateCallback(self, geometry, len, types_before, types_after, rate_constant, process_number, global_x, global_y, global_z):
        return _Backend.RateCalculator_backendRateCallback(self, geometry, len, types_before, types_after, rate_constant, process_number, global_x, global_y, global_z)

    def backendRateCallbackBuckets(self, geometry, len, occupation, update, type_map, rate_constant, process_number, global_x, global_y, global_z):
        return _Backend.RateCalculator_backendRateCallbackBuckets(self, geometry, len, occupation, update, type_map, rate_constant, process_number, global_x, global_y, global_z)
    def __disown__(self):
        self.this.disown()
        _Backend.disown_RateCalculator(self)
        return weakref.proxy(self)

# Register RateCalculator in _Backend:
_Backend.RateCalculator_swigregister(RateCalculator)

class SimpleDummyBaseClass(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == SimpleDummyBaseClass:
            _self = None
        else:
            _self = self
        _Backend.SimpleDummyBaseClass_swiginit(self, _Backend.new_SimpleDummyBaseClass(_self, ))
    __swig_destroy__ = _Backend.delete_SimpleDummyBaseClass

    def whoAmI(self):
        return _Backend.SimpleDummyBaseClass_whoAmI(self)
    def __disown__(self):
        self.this.disown()
        _Backend.disown_SimpleDummyBaseClass(self)
        return weakref.proxy(self)

# Register SimpleDummyBaseClass in _Backend:
_Backend.SimpleDummyBaseClass_swigregister(SimpleDummyBaseClass)


def callWhoAmI(obj):
    return _Backend.callWhoAmI(obj)

def getRate(rc, geometry, types_before, types_after, rate_constant, process_number, global_x, global_y, global_z):
    return _Backend.getRate(rc, geometry, types_before, types_after, rate_constant, process_number, global_x, global_y, global_z)
class MPICommons(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def init():
        return _Backend.MPICommons_init()

    @staticmethod
    def finalize():
        return _Backend.MPICommons_finalize()

    @staticmethod
    def myRank(*args):
        return _Backend.MPICommons_myRank(*args)

    @staticmethod
    def size(*args):
        return _Backend.MPICommons_size(*args)

    @staticmethod
    def barrier(*args):
        return _Backend.MPICommons_barrier(*args)

    @staticmethod
    def isMaster(*args):
        return _Backend.MPICommons_isMaster(*args)

    def __init__(self):
        _Backend.MPICommons_swiginit(self, _Backend.new_MPICommons())
    __swig_destroy__ = _Backend.delete_MPICommons

# Register MPICommons in _Backend:
_Backend.MPICommons_swigregister(MPICommons)

def MPICommons_init():
    return _Backend.MPICommons_init()

def MPICommons_finalize():
    return _Backend.MPICommons_finalize()

def MPICommons_myRank(*args):
    return _Backend.MPICommons_myRank(*args)

def MPICommons_size(*args):
    return _Backend.MPICommons_size(*args)

def MPICommons_barrier(*args):
    return _Backend.MPICommons_barrier(*args)

def MPICommons_isMaster(*args):
    return _Backend.MPICommons_isMaster(*args)

class OnTheFlyMSD(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, configuration, history_steps, n_bins, t_max, t0, track_type, abc_to_xyz, blocksize=0):
        _Backend.OnTheFlyMSD_swiginit(self, _Backend.new_OnTheFlyMSD(configuration, history_steps, n_bins, t_max, t0, track_type, abc_to_xyz, blocksize))

    def registerStep(self, time, configuration):
        return _Backend.OnTheFlyMSD_registerStep(self, time, configuration)

    def histogramBuffer(self):
        return _Backend.OnTheFlyMSD_histogramBuffer(self)

    def histogramBufferSqr(self):
        return _Backend.OnTheFlyMSD_histogramBufferSqr(self)

    def histogramBinCounts(self):
        return _Backend.OnTheFlyMSD_histogramBinCounts(self)

    def historyStepsHistogramBinCounts(self):
        return _Backend.OnTheFlyMSD_historyStepsHistogramBinCounts(self)

    def historyBuffer(self):
        return _Backend.OnTheFlyMSD_historyBuffer(self)

    def hstepCounts(self):
        return _Backend.OnTheFlyMSD_hstepCounts(self)

    def blockerValues(self):
        return _Backend.OnTheFlyMSD_blockerValues(self)
    __swig_destroy__ = _Backend.delete_OnTheFlyMSD

# Register OnTheFlyMSD in _Backend:
_Backend.OnTheFlyMSD_swigregister(OnTheFlyMSD)


def calculateAndBinMSD(history, abc_to_xyz, binsize, histogram, histogram_sqr, bin_counters, hsteps_bin_counts, hstep_counts, blocker):
    return _Backend.calculateAndBinMSD(history, abc_to_xyz, binsize, histogram, histogram_sqr, bin_counters, hsteps_bin_counts, hstep_counts, blocker)
MT = _Backend.MT
MINSTD = _Backend.MINSTD
RANLUX24 = _Backend.RANLUX24
RANLUX48 = _Backend.RANLUX48
DEVICE = _Backend.DEVICE

def setRngType(rng_type):
    return _Backend.setRngType(rng_type)

def seedRandom(time_seed, seed):
    return _Backend.seedRandom(time_seed, seed)

def randomDouble01():
    return _Backend.randomDouble01()


