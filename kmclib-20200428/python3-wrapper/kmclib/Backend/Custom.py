# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Custom
else:
    import _Custom

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Custom.delete_SwigPyIterator

    def value(self):
        return _Custom.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Custom.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Custom.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Custom.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Custom.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Custom.SwigPyIterator_copy(self)

    def next(self):
        return _Custom.SwigPyIterator_next(self)

    def __next__(self):
        return _Custom.SwigPyIterator___next__(self)

    def previous(self):
        return _Custom.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Custom.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Custom.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Custom.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Custom.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Custom.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Custom.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Custom.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Custom:
_Custom.SwigPyIterator_swigregister(SwigPyIterator)

class RateCalculator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Custom.RateCalculator_swiginit(self, _Custom.new_RateCalculator())
    __swig_destroy__ = _Custom.delete_RateCalculator

    def backendRateCallback(self, geometry, len, types_before, types_after, rate_constant, process_number, global_x, global_y, global_z):
        return _Custom.RateCalculator_backendRateCallback(self, geometry, len, types_before, types_after, rate_constant, process_number, global_x, global_y, global_z)

    def backendRateCallbackBuckets(self, geometry, len, occupation, update, type_map, rate_constant, process_number, global_x, global_y, global_z):
        return _Custom.RateCalculator_backendRateCallbackBuckets(self, geometry, len, occupation, update, type_map, rate_constant, process_number, global_x, global_y, global_z)

# Register RateCalculator in _Custom:
_Custom.RateCalculator_swigregister(RateCalculator)

class SimpleDummyBaseClass(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Custom.SimpleDummyBaseClass_swiginit(self, _Custom.new_SimpleDummyBaseClass())
    __swig_destroy__ = _Custom.delete_SimpleDummyBaseClass

    def whoAmI(self):
        return _Custom.SimpleDummyBaseClass_whoAmI(self)

# Register SimpleDummyBaseClass in _Custom:
_Custom.SimpleDummyBaseClass_swigregister(SimpleDummyBaseClass)


def callWhoAmI(obj):
    return _Custom.callWhoAmI(obj)

def getRate(rc, geometry, types_before, types_after, rate_constant, process_number, global_x, global_y, global_z):
    return _Custom.getRate(rc, geometry, types_before, types_after, rate_constant, process_number, global_x, global_y, global_z)
class BucketsTestCalculator(RateCalculator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, config):
        _Custom.BucketsTestCalculator_swiginit(self, _Custom.new_BucketsTestCalculator(config))
    __swig_destroy__ = _Custom.delete_BucketsTestCalculator

    def backendRateCallbackBuckets(self, geometry, len, occupation, update, type_map, rate_constant, process_number, global_x, global_y, global_z):
        return _Custom.BucketsTestCalculator_backendRateCallbackBuckets(self, geometry, len, occupation, update, type_map, rate_constant, process_number, global_x, global_y, global_z)

    def cutoff(self):
        return _Custom.BucketsTestCalculator_cutoff(self)

    def cacheRates(self):
        return _Custom.BucketsTestCalculator_cacheRates(self)

    def excludeFromCaching(self):
        return _Custom.BucketsTestCalculator_excludeFromCaching(self)

# Register BucketsTestCalculator in _Custom:
_Custom.BucketsTestCalculator_swigregister(BucketsTestCalculator)

class IsingTestCalculator(RateCalculator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, config):
        _Custom.IsingTestCalculator_swiginit(self, _Custom.new_IsingTestCalculator(config))
    __swig_destroy__ = _Custom.delete_IsingTestCalculator

    def backendRateCallback(self, geometry, len, types_before, types_after, rate_constant, process_number, global_x, global_y, global_z):
        return _Custom.IsingTestCalculator_backendRateCallback(self, geometry, len, types_before, types_after, rate_constant, process_number, global_x, global_y, global_z)

    def cutoff(self):
        return _Custom.IsingTestCalculator_cutoff(self)

    def cacheRates(self):
        return _Custom.IsingTestCalculator_cacheRates(self)

    def excludeFromCaching(self):
        return _Custom.IsingTestCalculator_excludeFromCaching(self)

# Register IsingTestCalculator in _Custom:
_Custom.IsingTestCalculator_swigregister(IsingTestCalculator)



